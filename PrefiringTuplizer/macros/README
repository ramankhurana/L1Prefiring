
## All the relevant code to fill the histogram etc is in: 

L1Prefiring.C 

## Save tghe pt plots using the trees, just to make sure pt peak is at 100 not at 40-50 GeV like in old smaples, 
Quick dirty macro: 
root -l -b -q SavePtPlots.C


## Save the Pseudo L1T plots, using 
### save the number of towers, save max index plot 
python SavePseudoL1TPlots.py

### Save the Energy sum plot [right now pt sum but has to be corrected soon]


rootfile location at: 
  if (is2017 && !timescan_)  inputrootfile = "/eos/cms/store/user/khurana//ZeroBias2/crab_prefiringanalysis2017_V4/191104_114219/0000/Merged_ZeroBias2017.root";  //2017 with prefiring after replacing th\
e RANK var with Energy

  if (is2017 && timescan_)  inputrootfile = "/eos/cms/store/group/phys_exotica/monoHiggs/ecal/Merged_FilesTimeScan/Merged_files/Merged_HLTPhysics_1_2_3_4.root"; // June 2018 Scan data                     
  if (!is2017) inputrootfile = "/eos/cms/store/user/khurana/ZeroBias1/crab_prefiringanalysis2018_V1/190509_091144/0000/Merged_2018.root"; // 2018 full readout data (1 run) 

For simulation the files are located at [for eta 2-2.5]
/eos/cms/store/user/khurana/ECAL/SimulationTuples/simulation_tuples_Eta_2p0_to_2p5
																									   Histo_L1Prefiring_0ns.root 
Histo_L1Prefiring_m12.root                                                                                                                                 
Histo_L1Prefiring_m4ns.root
Histo_L1Prefiring_m8ns.root                      
Histo_L1Prefiring_p12ns.root    
Histo_L1Prefiring_p4ns.root
Histo_L1Prefiring_p8ns.root                                                                                                                                  
: 
 
## this can be compiled and run using the shell script 

source run.sh 

## Once rootfile is available for each cut value, one can use them to fill the plots. 

## All the plots can be saved in PDF using: 
python PlotSaver_May14.py   

## all the related functions to perform the plotting etc are located in the PlotTemplates.py

## the probability values are dumped into text file for several ring and total, 
## This can be converted into rootfile and then saved into pdf using: 

python textgraph.py
python compareProb_all.py


############################################################################################################################################################
## to get the probablity from the DQM like histograms use the macro: 
ProbExtractorFromL1DQM.py

python ProbExtractorFromL1DQM.py 


In order to run it for all the time scan points use the shell script: 
source runalltimeprob.sh ## it also has the usage for this script 

############################################################################################################################################################
## For time scan results run following commands : 

python MakePlotsTimeScan.py -g -c 2 -a X  -m 
python MakePlotsTimeScan.py -g -c 4 -a X  -m 
python MakePlotsTimeScan.py -g -c 6 -a X  -m 
python MakePlotsTimeScan.py -g -c 8 -a X  -m 
python MakePlotsTimeScan.py -g -c 10 -a X -m  


python MakePlotsTimeScan.py -g -c 2 -a Y  -m 
python MakePlotsTimeScan.py -g -c 4 -a Y  -m 
python MakePlotsTimeScan.py -g -c 6 -a Y  -m 
python MakePlotsTimeScan.py -g -c 8 -a Y  -m 
python MakePlotsTimeScan.py -g -c 10 -a Y -m 

python MakePlotsTimeScan.py -o 


## To get probablity curve for David's root file use: 

for which in -6 -5 -4 -3 -2 -1 0 1 2 3 4 5 6; do python ProbExtractorFromL1DQM.py -i l1tHistograms.root -T $which -d; done

## convert .txt to .root file and plotting do 
python  textgraph_timescan_DQM.py

python MakePlotsTimeScan.py -CompareWithDavid




################################################################################################
################################################################################################
############ For simulation run the L1Prefiring.C by chnaging the time value by hand ###########
################################################################################################
################################################################################################

run for all MC points using: source run_allsimulation.sh


Once L1Prering.C is run on all the files, now ready to make the .txt files for prob and then make the overlapping plots. 
For simulation it makes more sense to make the -X plots becuase this is what is emulator prob is. 

python MakePlotsSimulation.py -g -c 2 -a Y  -m
python MakePlotsSimulation.py -g -c 4 -a Y  -m
python MakePlotsSimulation.py -g -c 6 -a Y  -m
python MakePlotsSimulation.py -g -c 8 -a Y  -m
python MakePlotsSimulation.py -g -c 10 -a Y -m



python MakePlotsSimulation.py -g -c 2 -a X  -m
python MakePlotsSimulation.py -g -c 4 -a X  -m
python MakePlotsSimulation.py -g -c 6 -a X  -m
python MakePlotsSimulation.py -g -c 8 -a X  -m
python MakePlotsSimulation.py -g -c 10 -a X -m


To draw the overlapping histogrmas, one need to run the command, 

python MakePlotsSimulation.py -o -a X



## PlotSaver_TimeScan.py is the script to save the probablities for each ring and each cut value, matched to the emulated TT. 

## this convert the .txt files in graphs textgraph_timescan.py which can be used for plotting using  the files: 

compareProb_all_timescanDQM.py
compareProb_all_timescan.py
OverlappingPlots.py

## useful notebooks : 
DumpProbability**
ECALPlotsDumper**
gapFlagDataBaseAnalyzer
PlotSaver_May14
compareProb.py**
compareProb_all.py**
textgraph.py**





